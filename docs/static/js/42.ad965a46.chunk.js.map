{"version":3,"sources":["../node_modules/codemirror/mode/dart/dart.js"],"names":["CodeMirror","keywords","split","blockKeywords","atoms","builtins","set","words","obj","i","length","pushInterpolationStack","state","interpolationStack","push","tokenize","popInterpolationStack","pop","tokenString","quote","stream","raw","tripleQuoted","eat","tokenStringHelper","escaped","eol","peek","tokenInterpolation","next","match","tokenInterpolationIdentifier","eatWhile","defineMIME","name","builtin","number","hooks","@","'","\"","r","}","_stream","sizeInterpolationStack","/","tokenNestedComment","depth","ch","token","_","style","isUpper","RegExp","test","current","registerHelper","concat","defineMode","conf","getMode","mod","__webpack_require__"],"mappings":"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","file":"static/js/42.ad965a46.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../clike/clike\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../clike/clike\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var keywords = (\"this super static final const abstract class extends external factory \" + \"implements mixin get native set typedef with enum throw rethrow assert break case \" + \"continue default in return new deferred async await covariant try catch finally \" + \"do else for if switch while import library export part of show hide is as extension \" + \"on yield late required sealed base interface when\").split(\" \");\n  var blockKeywords = \"try catch finally do else for if switch while\".split(\" \");\n  var atoms = \"true false null\".split(\" \");\n  var builtins = \"void bool num int double dynamic var String Null Never\".split(\" \");\n  function set(words) {\n    var obj = {};\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  function pushInterpolationStack(state) {\n    (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);\n  }\n  function popInterpolationStack(state) {\n    return (state.interpolationStack || (state.interpolationStack = [])).pop();\n  }\n  function sizeInterpolationStack(state) {\n    return state.interpolationStack ? state.interpolationStack.length : 0;\n  }\n  CodeMirror.defineMIME(\"application/dart\", {\n    name: \"clike\",\n    keywords: set(keywords),\n    blockKeywords: set(blockKeywords),\n    builtin: set(builtins),\n    atoms: set(atoms),\n    // clike numbers without the suffixes, and with '_' separators.\n    number: /^(?:0x[a-f\\d_]+|(?:[\\d_]+\\.?[\\d_]*|\\.[\\d_]+)(?:e[-+]?[\\d_]+)?)/i,\n    hooks: {\n      \"@\": function _(stream) {\n        stream.eatWhile(/[\\w\\$_\\.]/);\n        return \"meta\";\n      },\n      // custom string handling to deal with triple-quoted strings and string interpolation\n      \"'\": function _(stream, state) {\n        return tokenString(\"'\", stream, state, false);\n      },\n      \"\\\"\": function _(stream, state) {\n        return tokenString(\"\\\"\", stream, state, false);\n      },\n      \"r\": function r(stream, state) {\n        var peek = stream.peek();\n        if (peek == \"'\" || peek == \"\\\"\") {\n          return tokenString(stream.next(), stream, state, true);\n        }\n        return false;\n      },\n      \"}\": function _(_stream, state) {\n        // \"}\" is end of interpolation, if interpolation stack is non-empty\n        if (sizeInterpolationStack(state) > 0) {\n          state.tokenize = popInterpolationStack(state);\n          return null;\n        }\n        return false;\n      },\n      \"/\": function _(stream, state) {\n        if (!stream.eat(\"*\")) return false;\n        state.tokenize = tokenNestedComment(1);\n        return state.tokenize(stream, state);\n      },\n      token: function token(stream, _, style) {\n        if (style == \"variable\") {\n          // Assume uppercase symbols are classes using variable-2\n          var isUpper = RegExp('^[_$]*[A-Z][a-zA-Z0-9_$]*$', 'g');\n          if (isUpper.test(stream.current())) {\n            return 'variable-2';\n          }\n        }\n      }\n    }\n  });\n  function tokenString(quote, stream, state, raw) {\n    var tripleQuoted = false;\n    if (stream.eat(quote)) {\n      if (stream.eat(quote)) tripleQuoted = true;else return \"string\"; //empty string\n    }\n    function tokenStringHelper(stream, state) {\n      var escaped = false;\n      while (!stream.eol()) {\n        if (!raw && !escaped && stream.peek() == \"$\") {\n          pushInterpolationStack(state);\n          state.tokenize = tokenInterpolation;\n          return \"string\";\n        }\n        var next = stream.next();\n        if (next == quote && !escaped && (!tripleQuoted || stream.match(quote + quote))) {\n          state.tokenize = null;\n          break;\n        }\n        escaped = !raw && !escaped && next == \"\\\\\";\n      }\n      return \"string\";\n    }\n    state.tokenize = tokenStringHelper;\n    return tokenStringHelper(stream, state);\n  }\n  function tokenInterpolation(stream, state) {\n    stream.eat(\"$\");\n    if (stream.eat(\"{\")) {\n      // let clike handle the content of ${...},\n      // we take over again when \"}\" appears (see hooks).\n      state.tokenize = null;\n    } else {\n      state.tokenize = tokenInterpolationIdentifier;\n    }\n    return null;\n  }\n  function tokenInterpolationIdentifier(stream, state) {\n    stream.eatWhile(/[\\w_]/);\n    state.tokenize = popInterpolationStack(state);\n    return \"variable\";\n  }\n  function tokenNestedComment(depth) {\n    return function (stream, state) {\n      var ch;\n      while (ch = stream.next()) {\n        if (ch == \"*\" && stream.eat(\"/\")) {\n          if (depth == 1) {\n            state.tokenize = null;\n            break;\n          } else {\n            state.tokenize = tokenNestedComment(depth - 1);\n            return state.tokenize(stream, state);\n          }\n        } else if (ch == \"/\" && stream.eat(\"*\")) {\n          state.tokenize = tokenNestedComment(depth + 1);\n          return state.tokenize(stream, state);\n        }\n      }\n      return \"comment\";\n    };\n  }\n  CodeMirror.registerHelper(\"hintWords\", \"application/dart\", keywords.concat(atoms).concat(builtins));\n\n  // This is needed to make loading through meta.js work.\n  CodeMirror.defineMode(\"dart\", function (conf) {\n    return CodeMirror.getMode(conf, \"application/dart\");\n  }, \"clike\");\n});"],"sourceRoot":""}